{"version":3,"sources":["assets/images/profile.jpg","assets/images/hypertube.gif","assets/images/matcha.gif","assets/images/chatbot.gif","constants/colors.js","components/home/components/Presentation.js","styles/common.js","components/home/components/Projects.js","components/home/index.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","SWrapper","styled","div","_templateObject","SImage","img","_templateObject2","STextWrapper","_templateObject3","SText","_templateObject4","Presentation","react_default","a","createElement","src","Photo","alt","STitle","h2","common_templateObject","SDescription","common_templateObject2","SLink","common_templateObject3","ProjectsList","title","Hypertube","link","website","github","description","li","Matcha","Chatbot","Projects_templateObject","SWrapperRow","Projects_templateObject2","SProjectImage","Projects_templateObject3","SDescriptionWrapper","Projects_templateObject4","Projects","key","href","_this","this","Projects_SWrapper","map","data","renderProjects","Component","Home","Fragment","components_Presentation","components_Projects","HomePage","home","App","pages_home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.239a72b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.015f5bff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hypertube.89e30da2.gif\";","module.exports = __webpack_public_path__ + \"static/media/matcha.c201ff9e.gif\";","module.exports = __webpack_public_path__ + \"static/media/chatbot.5c210b11.gif\";","export default { grey: '#e8ecee', white: '#fff' };\n","import React from 'react';\nimport styled from 'styled-components';\nimport colors from '../../../constants/colors';\nimport Photo from '../../../assets/images/profile.jpg';\n\nconst SWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  background-color: ${colors.grey};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SImage = styled.img`\n  width: 300px;\n  height: 300px;\n  border-radius: 50%;\n`;\n\nconst STextWrapper = styled.div`\n  margin-left: 50px;\n`;\n\nconst SText = styled.p`\n  font-size: 2em;\n`;\n\nconst Presentation = () => {\n  return (\n    <SWrapper>\n      <SImage src={Photo} alt=\"Github Pictures\" />\n      <STextWrapper>\n        <SText>Denis ZHENG</SText>\n        <SText>Javascript Freelance</SText>\n        <SText>React Native - React JS - Node JS - GraphQL</SText>\n      </STextWrapper>\n    </SWrapper>\n  );\n};\n\nexport default Presentation;\n","import styled from 'styled-components';\n\nexport const STitle = styled.h2`\n  font-family: 'Quicksand', sans-serif;\n  font-size: 2em;\n`;\n\nexport const SDescription = styled.p`\n  font-family: 'Lekton', sans-serif;\n  font-size: 1.4em;\n`;\n\nexport const SLink = styled.a`\n  font-family: 'Lekton', sans-serif;\n  font-size: 1.4em;\n  text-decoration: none;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport colors from '../../../constants/colors';\n\nimport Hypertube from '../../../assets/images/hypertube.gif';\nimport Matcha from '../../../assets/images/matcha.gif';\nimport Chatbot from '../../../assets/images/chatbot.gif';\nimport { SDescription, SLink, STitle } from '../../../styles/common';\n\nconst ProjectsList = [\n  {\n    title: 'Hypertube - Streaming website',\n    img: Hypertube,\n    link: {\n      website: null,\n      github: 'https://github.com/Densz/hypertube',\n    },\n    description:\n      'PopCornTime Streaming Web Application with BitTorrent protocol.',\n    li: ['React JS', 'Node JS', 'Express JS', 'Mongo DB'],\n  },\n  {\n    title: 'Matcha - Dating Web App',\n    img: Matcha,\n    link: {\n      website: null,\n      github: 'https://github.com/Densz/matcha',\n    },\n    description:\n      'Dating website with like and dislike swipe feature, notifications and real-time chat.',\n    li: ['Node JS', 'Express JS', 'EJS Template', 'Mongo DB', 'Socker.io'],\n  },\n  {\n    title: 'Luton Airport ChatBot',\n    img: Chatbot,\n    link: {\n      website: null,\n      github: null,\n    },\n    description:\n      'Winner of the HEC Challenge - Data science with Chat Bot on Facebook Messenger in partnership with Luton Airport (London, UK).',\n    li: ['Node JS', 'Recast.ai', 'Facebook Messenger API'],\n  },\n];\n\nconst SWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  height: auto;\n  background-color: ${colors.white};\n  padding-top: 50px;\n`;\n\nconst SWrapperRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 80%;\n  margin-bottom: 50px;\n`;\n\nconst SProjectImage = styled.img`\n  width: 40vw;\n  height: 26vw;\n`;\n\nconst SDescriptionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 50px;\n`;\n\nclass Projects extends Component {\n  renderProjects(title, img, link, description, li) {\n    return (\n      <SWrapperRow key={description}>\n        <SProjectImage src={img} alt={description} />\n        <SDescriptionWrapper>\n          <STitle>{title}</STitle>\n          <SDescription>{description}</SDescription>\n          {link.github && <SLink href={link}>Github link</SLink>}\n          {link.website && <SLink href={link}>{link.website}</SLink>}\n        </SDescriptionWrapper>\n      </SWrapperRow>\n    );\n  }\n\n  render() {\n    return (\n      <SWrapper>\n        {ProjectsList.map(data => {\n          return this.renderProjects(\n            data.title,\n            data.img,\n            data.link,\n            data.description,\n            data.li\n          );\n        })}\n      </SWrapper>\n    );\n  }\n}\n\nexport default Projects;\n","import React from 'react';\nimport Presentation from './components/Presentation';\nimport Projects from './components/Projects';\n\nconst Home = () => {\n  return (\n    <>\n      <Presentation />\n      <Projects />\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Home from '../components/home/';\n\nconst HomePage = () => {\n  return <Home />;\n};\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport Home from './pages/home';\n\nclass App extends Component {\n  render() {\n    return <Home />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}